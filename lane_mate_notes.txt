//Lane_Mate Notes Jan. 20//

Afternoon task:
create a front end test ui for doing CRUD operations on all the tables

Look into AWS

There is potential here for vetting carriers.
This is an application that handles 
taking quote requests from the customer
dealing with the spot market
returning the quote to the customer

- Keep track of quotes given
- Keep track of carrier on given lanes; leads
- Helps you build a database of carriers
- Checks MC numbers, gets information, returns how trustworthy
- Potentially just putting in MC number, getting rate would be fastest, and most secure
- adding a feature that sent a formatted email would be awesome;
allow the user to customize it??
-make templates?
-select a quote, which brings you to another screen where you 
send the quote response
-make a quote response object?
-it should be simple at first, and reveal complexity and flexibility
-carrier management?
if you keep track of what margins were when your bids were successful, you could eventually optimize how much to mark 
something up

SAFER WATCH integration
https://www.saferwatch.com/helpdocs/WebServices/Keys.php?version=32

Google SEARCH integration
https://developers.google.com/custom-search/docs/overview

//Jan.21//

Add website to Carrier info

UI should reveal essential features that are used 80% of the time
and then show complex options at the users request
When showing load info, only show the weight and skid count and any special consideration
on edit, have a 'more options' tab.

//Jan.22//

Perhaps focus on the core functionality
and actively not try to be a TMS.
Do we need to store extensive load and carrier info?
Well what is the cost of it? A little up front work?
You don't need to show it to the user.
Should I have different files on the backend to organize each API?
Is there a way to render all these ui elements dynamically?

I'm having trouble thinking through the process of POSTing a row to a table
when one of the columns in that row is a foreign key
which references a row in another table 
whose columns depend on user input

settings has to have a default weight measurement

As control flow

if is_palletized is true AND pallets_same_dims is false:

i) show dialog to enter pallet dimension information,
which corresponds to the 
columns in the pallet_dims table

ii)the id of this row will then be passed 
as a property on the object that will be stored in the loads table
-its state is going to have to be stored in between, because it's 
going to have to be submitted when the whole form is.

else if is_palletized is true and pallets_same_dims is true:
ask how many pallets and if pallets are standard sized and how heavy are they?
if they are standard sized, populate pallet_dims with num_pallets at 48' x 40' x 72'
pass the id as on the load object to be added to the loads table


Maybe we should always assume that pallets are equal size and dims, because in a lot of
situations, that will be the case. One click of custom dimensions 
would allow you to bring up another menu and input that info.
So by default, pallets_same_dims is true and all of that logic is bypassed.

In any case, to simplify this, move on from customizable pallet sizes?

If I need to add a load to a table that requires another table's key,
the input function form will return a value that is saved in a variable
in the scope of the function that sumbits the POST request.
That variable is then added to the object.

Build a pallet form dialog Component
carrier form dialog Component
Customer form dialog Component
additional picks_drops_component
offer table Component
quote request Component

Will I need react context?

-Look to polaris for inspo, don't reinvent the wheel.
The work flow will be similar, but will facilitate a wider range of inputs

//Jan 23//

1) I'm building out a ui to practise dealing with the database, 
but I'm at the point where the compnents I create will depend on 
UX design. UX -> UI
For example, should the form that handles data entry for pallets
appear as a modal dialog only if pallets aren't standard?
Polaris has you adding one pallet at a time, but they only ship < 4 at one time.
- Add pallets, have the option to set a number of pallets and dims.
Perhaps two main flows: 

the quote request set up flow, which handles:
-enter customer
- enter pickup date 
- add origins and destinations
- add equipment type
- add handling units and dimensions
- add special attributes and instructions

and the carrier offer flow, which handles:
-user input of carrier and offer information

This week:
Worked on SQL,
Built the schema,
and then got all the tables made
hooked them up to a front end
now

- SQL Transcations
- Authorization Authenication
- Refactor SQL Schema: as flat as possible, easy to join
- use as little foreign keys as possible
- take a look web security
- MVC Design patterm


//Jan. 26//
I'm beginning to think about this as a carrier management tool,
and a tool for preparing quotes for customers
its a tool to help you find trucks
imagine a map that places all the kinds of equipment you've been quoted on
the real value prop is what we can do with the data collection that 
happens when a broker takes quotes from many carriers.
you should be able to search by lane, and return
all the carriers that run on it, and sort by equipment
"give me all the carriers who run flat beds from Edmonton to Toronto"
a part of this is prospecting for new carriers:
imagine your company has a huge rfp; each rep is assigned a region
you can the search through all of the carriers who called you on a lane
if you work this way for 5 years, you will have a big database of carriers to draw from

//Jan. 27//
Number of feet should automatically calculate on entry
add one line short description to quote request entry
UI stuff
If you're going about your day and quoting different things
does everything happen too fast?
what's the variation?
how long between getting quotes and booking it?
reminder, holding in memory

//Feb 1//
https://simplemaps.com/data/canada-cities 

eventually it will be necessary to have an exhaustive list of american and canadian cities

Feb 2

//Allow 3 different users to sign up, sign in, and create
carriers and customers
For the purposes of this demo,
carriers can be shared across the 2 users,
but customers have to be unique to each user//

This will involve having a user_id on both the customer and carrier tables

//Authentication//
If user does not have an account
-submit valid name and email
-form makes a call to /users endpoint
-at users endpoint, POST to users db
-let the user in, and cache accesstoken and userID in local storage
-the user can only access the database if the token is authorized,
and the user id matches the one in the customer row

If user does have an account
-Form submitted does a get request to the users endpoint
-queries the table to see if user is in the table
if not, something wrong with credentials
if yes, cache user info in local storage (for now)

once this is figured out, just wire it it up to the existing version.

//

Flow for create a quote request.

user logs in
(handled above)
user clicks create quote request
new empty quote request object instantiated
with sales rep number
const quote request = {
sales_rep_ID:1,
customerID: 0,
lane = {
	id: 0
	lane_stops:[]
}
equipment_type: 0
handling_units: []

}

i) prompted with a modal to select a customer -> GET request to customer table
if none, create a customer, another modal form -> post request to customers table
customer info is passed to quote request object

ii) 
lane object instantated
lane = {
id = GET next id from the table, (current id + 1)
lane_stops: [lane_stopID, lane_stopID, lane_stopID]
}
prompted with enter origin and destination modal
(should there be a province/state table too?)
for each, a search bar, drawing on the list of canadian cities
enter city, province
->POST to city table, WHERE includes, or something, called at every onchange event
populate the drop down with results: MUI autocomplete will do this
then when you click on it, the city id is added to lane_stops table, along with the lane_id
this lane_stop is added to the lane_stop array on the lane object
follow same process for the destination
this on submit, the lane is passed to the quote request object
(this is where transcations could come in?)
if the user cancels at this point, go back and undo all of the lane info
(perhaps waiting

iv)add equipment type, perhaps from drop down
iv)
handling_unit array instantiated
prompted with dialog to add
number, handling_type, weight in lbs/kgs, length, width, height (link to special attributes modal)
onSubmit, add to the handling_unit table, and pass the id to the handling_units array
after all are submitted, pass the handling_units array to the quote request object

V) format all of the data from the quote request object into a formatted quote request card and display it

Vi)show the carrier entry form and carrier table

Vii)when entering a carrier, it checks whether it is in the db, if not adds it and adds this to the offer object, which is added to the offers table,
which is actually displayed beneath the Quote request card. each of these offers has an ID associated with the quote request

when searching, we only need to return the carriers associated with this quote request

1)
sign up users to db
once signed up assign token and reroute to home.



Validate sign in form//
when invalid request sent, display incorrect password error|
if email is already in database, return wrong password error|

now, only show dashboard if access token is validated|

get add customer portion to quote request figured out
- search bar in dialog, autocomplete, and add button
click customers and have different ones show up based on user_id


//Feb 4//

4. start in on quote request sequence above:

have separate dialogs for each part of the data entry
with next and back buttons on the bottom

1. Customer
2.Origin and Destination
3. Equipment type and Handling Units


thats kinda wired together now, so move onto

1. storing quote requests in the data base
-make endpoint
-format data
-make table to search like carriers and customers
to make sure you have post and get

there will be a dbQuoteRequest object and a formatted displayQuoteRequestObject

creating the lane stops table:
when city is submitted, a lane_stop object is created and posted to the lane_stop table for every origin and destination, each with the same lane_id
this lane_id is passed to the quote_request_dialog to be bundled with the other info tha will make up the quoteRequestObject that will be 
posted to the quote_requests_table

quoteRequestDBObject{
id:1,
sales_rep_id = localstorage.getItem("userID"),
customer_id = customer_id,
}

it's really that simple.

(for the table of quote requests, allow the user to click a row and bring up another table of all the offers)

there's no dashboard object any more, we will just render the offer rows that corresponds to 
the quoteRequestId that is displayed. getting the quote request table together would make this easier
it will be a join
to display the table of quote request rows.
perform a series of queries that will give a table you can display and then map this to a table
when clicking each one, the corresponding offers appear.

perhaps start with figuring out the queries?

only need lane_stop entries;
make them at the quote request component level
need an object like this:
const lane_stop = {
city_id: 12312313,
is_origin: true
}

we need to get add the quote request number when it is generated at the top level,
so pass up an array of lane_stops
lane_stops = [{
city_id: 12121212,
is_origin: false,
},
city_id: 2345235,
is_origin: true,
}

These are made in lane quote dialog
go back and fix it later so lane quote dialog returns lane_stops as an array of objects

now it's time to make the offer table

right now i'm handling the logic of dealing with carriers and offers
then onto handling units
and then i should be persisting them
at which point i'll turn to search
upsert and returning columns, id name, etc

side bar, nav to different kinds of data, each views of tables
check out notion,upsert

eventually be able to go through the list of carriers, call them and add their quote to the list. the is about helping brokers cover loads

//FEB 9//
-on create quote request: 
create quote request with sales_rep_id and customerid and add it to the db | done
create all the lane_stops entries and add them to the table with a reference to the quote_request id | done
add all the handling units to the database as Well
-feb 10 task: when you click submit, send the object to the backend
-first make handling_unitAPI
-everytime a quote requested is submitted, send an array of objects representing distinct handling units to the endpoint


on save quote request, add all the offers (perhaps this should happen every time you add a carrier)

Feb 12//
as of now, submitting a quote request adds a quote request, lane_stops, load info and equipment type to the db

main task is to format and display this data on the main dashboard card
-it is working for only one origin, destination, and handling type. 
-need to work through how these will be displayed in all the different circumstances

Feb 13//
now when submitting a carrier through the carrier form, an offer object is posted to its endpoint

next task: enable search functionality









 



  




